name: Development Branch Workflow

on:
  push:
    branches: [development]
  pull_request:
    branches: [development]

jobs:
  build:
    name: Build Java App
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: 1.8

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build with Maven
        run: mvn clean package

      - name: Upload WAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: verademo.war
          path: target/verademo.war

  pipeline-scan:
    name: Veracode Pipeline Scan
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    container:
      image: veracode/pipeline-scan:latest
      options: --user root
    steps:
      - name: Download WAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: verademo.war
          path: /tmp

      - name: Run Veracode Pipeline Scan
        run: |
          java -jar /opt/veracode/pipeline-scan.jar \
            -vid "${{ secrets.VERACODE_API_ID }}" \
            -vkey "${{ secrets.VERACODE_API_KEY }}" \
            --fail_on_severity="Very High, High" \
            --file /tmp/verademo.war \
            -jf results.json \
            -fjf filtered_results.json
        continue-on-error: true

      - name: Upload Full Results
        uses: actions/upload-artifact@v4
        with:
          name: PipelineScanResults
          path: results.json

      - name: Upload Filtered Results
        uses: actions/upload-artifact@v4
        with:
          name: filtered-results
          path: filtered_results.json

  import-findings-to-code-scanning-alerts:
    name: Convert to SARIF & Upload
    needs: pipeline-scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Download Scan Results
        uses: actions/download-artifact@v4
        with:
          name: PipelineScanResults

      - name: Convert to SARIF
        id: convert
        uses: veracode/veracode-pipeline-scan-results-to-sarif@v0.1.5
        with:
          pipeline-results-json: results.json
          source-base-path-1: "^com/veracode:src/main/java/com/veracode"
          source-base-path-2: "^WEB-INF:src/main/webapp/WEB-INF"

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: veracode-results.sarif

      - name: Upload SARIF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: VeracodeSARIF
          path: veracode-results.sarif

  import-issues:
    name: Create GitHub Issues from Flaws
    needs: pipeline-scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Download Filtered Results
        uses: actions/download-artifact@v4
        with:
          name: filtered-results

      - name: Import Issues from Flaws
        uses: buzzcode/veracode-flaws-to-issues@v1
        with:
          scan-results-json: filtered_results.json
          github-token: ${{ secrets.GH_TOKEN }}
          source_base_path_1: "com/veracode:src/main/java/com/veracode"
          source_base_path_2: "WEB-INF:src/main/webapp/WEB-INF"
          commit-hash: ${{ github.sha }}

  software-composition-analysis:
    name: Software Composition Analysis (SCA)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: 1.8

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Run SourceClear (SCA)
        run: curl -sSL https://download.sourceclear.com/ci.sh | bash -s scan . --update-advisor 2>&1 | tee sca_output.txt
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}

      - name: Upload SCA Results
        uses: actions/upload-artifact@v4
        with:
          name: SCAScanResults
          path: sca_output.txt
